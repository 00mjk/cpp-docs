<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE html PUBLIC "-//W3C//DTD Xhtml 1.1//EN" 
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" > 
<head> 
<title>Bing Maps Trip Optimizer</title> 

<object id="OptimizerControl" name="OptimizerControl" classid="CLSID:10FFAAB9-0E73-4C4D-8118-6225C7F2E692"></object>
<script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.3"></script>

<style type="text/css" media="screen"> 
    
body { 
   margin:0; 
   padding:0; 
   width:100%;
   height:100%;
   font:small/normal Arial,Helvetica,Sans-Serif;   
} 

a:link { color: blue; }
a:visited { color: blue; }

hr {
   float:right;
   border: 0;
   width: 100%;
   color: #e5e5e5;
   background-color: #e5e5e5;
   height: 2px;
   margin-top:10px;
}

#OuterFrame {
   position:absolute; 
   left:0px; 
   top:0px; 
   padding:0; 
   width:100%;
   height:100%;
   border:0px;
}

#LeftFrame { 
   position:absolute; 
   width:320px; 
   height:100%; 
} 

#FrameSep {
   margin-left:320px; 
   position:absolute; 
   width:1px; 
   height:100%; 
   background:black; 
}

#RightFrame { 
   position:absolute;
   width: 100%;
   height:100%;
   margin-left:321px; 
} 

.LeftFrame_Top {
   padding:0 10px; 
   margin-top:20px; 
} 

.LeftFrame_TopRight {
   padding:0 10px; 
   text-align:right;
   margin-right:10px;
   margin-top:20px; 
} 

.Module {
   margin-bottom:31px
}

.ElementContainer {
   position:relative;margin-top:20px;
}

.ElementContainer select {
   font-size:100%;
   margin-left:20px;
   border:1px #0080c4 solid;
   background:#fff;
   padding:.15em .30em .15em .15em;
}

.aButton {
   float:right;
   border:1px #c4c4c4 solid;
   padding:.40em .40em .40em .40em;   
   margin-right:10px;
   display:block;
   font-size:100%;
   text-decoration:none;   
}

.aButton:hover {
   text-decoration:underline;
}

.InputArea {
   font-size:125%;
   border:1px #c4c4c4 solid;
   background:#fff;
   white-space:nowrap;
   float:none;
   margin-left:50px;
   padding:.3em;
   width:247px!important;
}

.InputArea input {
   float:left;
   border:0;
   margin:0 0 -.8em;
   font-size:100%;
   padding:.05em .25em .25em .45em;
   width:18.7em;
   -webkit-appearance:none;
   outline:none;
   float:none!important;
   padding:0!important;
   margin:0!important;
   width:247px!important;   
}

.DirectionStepLetter {
   position:absolute;
   color:White;
   left:8px;
   font-size:.8em;
   font-weight:bold;
   height:39px;
   width:24px;
   line-height:25px;
   text-align:left;
   text-indent:4px;
   background:url(./flag.png) no-repeat 0 0;
   width:35px;
}

.SmRightLink {
   font-size:75%;
   text-align:right;
   margin-right:10px;
   margin-top:-3px;
}

#AddToRoute {
   font-size:75%;
   text-align:right;
   margin-right:10px;
   position:relative;
   margin-top:20px;
}

#ProgressStatus {
   bottom:0;
   position:absolute; 
   height:50px; 
   width:600px;
   top:100%;
   margin-top:-75px;
   margin-left:120px;
   background:#e5e5e5;
   border:solid 1px black;
   z-index:1000;
   filter:alpha(opacity=60);
   opacity:0.6;
}

#ProgressStatus p {
   filter:alpha(opacity=100);
   opacity:1.0;   
   font-size:75%;
   text-align:left;
   font-weight:bold;
   color:#000000;
}

#ProgressStatus:hover {
    opacity:1.0;
    filter:alpha(opacity=100);
}

#BingDevKey {
   bottom:0;
   position:absolute; 
   height:130px; 
   width:600px;
   top:40%;
   margin-top:-75px;
   margin-left:120px;
   background:#e5e5e5;
   border:solid 1px black;
   z-index:1000;
}

.RouteSummary {
   position:relative;
   height:36px; 
   width:100%;
   margin-top:10px;
   background:#efefef;
   border:0;
   font-weight:bold;
}

.RouteSummaryInterior {
   position:absolute;
   margin-left:10px;
   margin-top:10px;
   color:Black;
}

#RouteLegs {
   position:absolute;
   margin:10px 10px 10px 10px;   
   overflow:auto;
   height:85%;
}

.RouteLegSummary {
   float:left;   
}

.RouteLegSummary p {
   font-size:75%;
   font-weight:bold;
   float:right;
}

.RouteLeg {
   width:100%;
}

.RouteLegLeft {   
    float:left;
}

.RouteLegCenter {
   float: left;
   margin-left:5px;   
   width:75%;
}

.RouteLegCenter p {
   margin-top:0px;
   margin-bottom:0px;
}

.RouteLegRight {
   float:right;
}

.DisambiguateBox {
   font-size:100%;
   margin-left:10px;
   margin-right:10px;
   margin-top:5px;
   border:1px #efef84 solid;   
}

.DisambiguateHeader {
   font-size:110%;
   margin:10px 10px 10px 10px;  
}

.DisambiguateItem {
   font-size:90%;
   margin:10px 10px 10px 10px;
}

</style> 

<script type="text/javascript">
   
   // Map control.
   var map = null;

   //
   // Used to manage waypoints.
   //
   var waypoints = new Array();
   var nextWaypointId = 0;
   var maxWaypoints = 25;
   var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
   

   // Called when the page loads.
   function OnLoad() {
      // Load the map control.
      map = new VEMap('Map');            
      map.LoadMap();

      // Reset waypoints.
      ResetWaypoints();            
   }

   // Adds a waypoint to the input area with the given initial text in
   // the input box.
   function AddWaypoint(inputText) {

      // Check for max inputs.
      if (waypoints.length == maxWaypoints) {
         alert('Cannot specify more than ' + maxWaypoints + ' waypoints.');
         return;
      }         
        
      var div = document.createElement("div");
      div.setAttribute("id", "WaypointContainer" + nextWaypointId);
      div.setAttribute("class", "ElementContainer");
                      
      var span = document.createElement("span");
      span.setAttribute("id", "StepLetter" + nextWaypointId);
      span.setAttribute("class", "DirectionStepLetter");
      span.innerHTML = alphabet[waypoints.length];
      div.appendChild(span);
                        
      var div2 = document.createElement("div");
      div2.setAttribute("id", "WaypointInputWrapper" + nextWaypointId);
      div2.setAttribute("class", "InputArea");
      {
         var input = document.createElement("input");
         input.setAttribute("id", "WaypointInput" + nextWaypointId);
         input.setAttribute("type", "text");
         input.setAttribute("maxlength", "256");               
         input.value = inputText;
         div2.appendChild(input);
      }
      div.appendChild(div2);
            
      var div3 = document.createElement("div");
      div3.setAttribute("id", "remove" + nextWaypointId);
      div3.setAttribute("class", "ElementContainer SmRightLink");
      {
         var a = document.createElement("a");
         a.setAttribute("href", "javascript:RemoveWaypoint('WaypointContainer" + nextWaypointId + "')");
         div3.appendChild(a);
      }         
      div.appendChild(div3);

      // Add to document.
      Waypoints.appendChild(div);
      // Add to our collection.
      waypoints.push(div);

      nextWaypointId++;

      UpdateRemoveLinks();
   }

   // Removes the waypoint with the provided ID from the input area.
   function RemoveWaypoint(waypointId) {
      // Remove from our collection.
      for (var waypoint in waypoints) {
         if (waypoints[waypoint].id == waypointId) {                  
            waypoints.splice(waypoint, 1);
            break;
         }
      }
            
      // Remove from document.
      Waypoints.removeChild(document.getElementById(waypointId));

      RenumberWaypoints();
      UpdateRemoveLinks();
   }

   // Removes all waypoints from the input area.
   function ResetWaypoints() {
      while (waypoints.length > 0) {
         RemoveWaypoint(waypoints[0].id);
      }
      AddWaypoint('');
      AddWaypoint('');
   }

   // Renumbers the flags that appear next to the waypoint inputs.
   function RenumberWaypoints() {
      for (var waypoint in waypoints) {
         waypoints[waypoint]
            .getElementsByTagName("span")[0]
            .innerHTML = alphabet[waypoint];
      }
   }

   // Ensures that the 'remove' link correctly appears next to each waypoint.
   function UpdateRemoveLinks() {
      // If there are fewer than three waypoints, disable the 'remove' link.
      // Otherwise, enable the 'remove' link for each waypoint.
      var linkText = "";
      if (waypoints.length > 2) {
         linkText = "remove";
      }
      for (var waypoint in waypoints) {
         waypoints[waypoint]
            .getElementsByTagName("div")[1]
            .getElementsByTagName("a")[0].innerHTML = linkText;
      }
   }

   // Populates the input area with parks in the Pacific Northwest.
   function AddParkWaypoints() {
      // Clear the previous input.
      while (waypoints.length > 0) {
            RemoveWaypoint(waypoints[0].id);
        }

      // Start and end in Seattle.
      AddWaypoint('Space Needle');

      // Add parks in no particular order.
      AddWaypoint('Coulee Dam, WA');
      AddWaypoint('Crater Lake National Park, OR');
      AddWaypoint('Glacier National Park, MT');
      AddWaypoint('Lassen Volcanic National Park, CA');
      AddWaypoint('Mount Rainier National Park, Ashford WA');
      AddWaypoint('North Cascades National Park, WA');
      AddWaypoint('Olympic National Park, WA');
      AddWaypoint('Redwood National Park, CA');
      AddWaypoint('Yellowstone National Park, WY');
   }

   // Populates the input area with a fictitious delivery route.
   function AddDeliveryWaypoints() {
      // Clear the previous input.
      while (waypoints.length > 0) {
            RemoveWaypoint(waypoints[0].id);
         }

      // Begin and end at our company in Seattle.
      AddWaypoint('James St, Seattle WA 98104');

      // Deliver to a number of local gas stations.
      AddWaypoint('11001 Roosevelt Way NE, Seattle WA'); // 76
      AddWaypoint('2801 Martin Luther King Jr Way S, Seattle WA'); // 76
      AddWaypoint('101 NE 50th St, Seattle WA'); // 7-Eleven
      AddWaypoint('103 15th Ave E, Seattle WA'); // 7-Eleven
      AddWaypoint('11065 8th Ave S, Seattle WA'); // 7-Eleven
      AddWaypoint('11657 Des Moines Memorial Dr, Seattle WA'); // 7-Eleven
      AddWaypoint('1518 W Dravus St, Seattle WA'); // 7-Eleven
      AddWaypoint('1652 SW Lander St, Seattle WA'); // ARCO
      AddWaypoint('2347 California Ave SW, Seattle WA'); // Chevron
      AddWaypoint('3317 W Government Way, Seattle WA'); // Shell
      AddWaypoint('3201 20th Ave W, Seattle WA'); // AM/PM
      AddWaypoint('427 12th Ave, Seattle WA'); // AM/PM
      AddWaypoint('12903 20th Ave NE, Seattle WA'); // AM/PM
      AddWaypoint('10822 Roosevelt Way NE, Seattle WA'); // ARCO
      AddWaypoint('10504 Aurora Ave N, Seattle WA'); // AM/PM
      AddWaypoint('2424 Beacon Ave S, Seattle WA'); // Shell
      AddWaypoint('2415 Beacon Ave S, Seattle WA'); // 76
      AddWaypoint('600 S Michigan St, Seattle WA'); // Shell
      AddWaypoint('13001 Lk City Way NE, Seattle WA'); // Chevron
      AddWaypoint('1520 SW 100th St, Seattle WA'); // Chevron
   }

   // Collects the waypoints and other options from user input and sends 
   // them to the control.
   function GetDirections() {

      // Ensure that the user entered a Bing Maps developer key.
      if (BingMapsKey.length == 0) {
         alert("You must enter a Bing Maps developer key before you can optimize your trip.");
         return;
      }

      // Ensure that the user provided a non-negative, numeric iterations value.
      var iterations = parseInt(IterationsText.value);            
      if (isNaN(iterations) || iterations < 1) {
         alert("'Iterations' must be greater than 0");
         return;
      }            

      // Read each waypoint from the user input and add it to an array.
      var locations = new Array();
      for (var waypoint in waypoints) {
         var location = waypoints[waypoint]
            .getElementsByTagName("div")[0]
            .getElementsByTagName("input")[0].value;
         if (location.length > 0) {
            locations.push(location);
         }
      }
      // Ensure that the user provided at least two locations.
      if (locations.length < 2) {
         alert("Please enter at least two locations for your trip.");
         return;
      }
      
      // Read additional user options from the page.
      var alpha = parseFloat(AlphaSelect.value);
      var beta = parseFloat(BetaSelect.value);
      var rho = parseFloat(RhoSelect.value);
      var parallel = ParallelProcessingCheckbox.checked;
      
      // Prepare the UI for the operation.
      ShowElement("ProgressDiv", true);
      StartProgressTimer();
      DisableElement(InputArea, true);
      
      // Clear any previous error message.
      ErrorMessageText.innerHTML = "";

      // Begin the trip optimization. The control will call us back when the 
      // operation is finished or when there is an unrecoverable error.
      OptimizerControl.OptimizeTripAsync(locations, 
         TravelModeSelect.value,
         OptimizeSelect.value,
         BingMapsKeyInput.value,
         alpha, beta, rho, iterations, parallel);

      // Enable the Cancel button.
      CancelButton.disabled = false;            
   }

   // Called when the user presses the 'Edit Route' button.
   function OnEditRoute() {
      // Update the UI.
      ShowElement('TaskHost_Turns', false);
      ShowElement('TaskHost_WelcomeTask', true);
   }

   // Called when the user presses the 'Print' button.
   function OnPrint() {
      // This functionality is not yet implemented.
      alert("Print functionality not yet implemented.");      
   }
   
   // Called when the user presses the 'Cancel' button.
   function OnCancel() {
      // Prevent multiple cancel operations.
      CancelButton.disabled = true;

      // Inform the control to cancel the operation.
      OptimizerControl.CancelAsync();
   }

   var BingMapsKey = ""; // the user's Bing Maps developer key.

   // Called when the user presses the 'OK' button from the Bing Maps
   // developer key input area.
   function OnBingMapsKey() {
      BingMapsKey = BingMapsKeyInput.value;
      // Hide the input area.
      ShowElement("BingDevKey", false);
   }

   // Enables the input area.
   function EnableInput() {
      // Stop the progress timer and hide the progress message 
      // (including the Cancel button).
      StopProgressTimer();   
      ShowElement("ProgressDiv", false);

      // Enable the input UI.
      DisableElement(InputArea, false);
   }
      
   var progressIntervalId = 0;   // Timer ID for progress messages.
   var ellipsis = "";            // Helps with the progress message animation.

   // Starts the progress animation that appears above the input UI.
   // This animation runs when the control is optimizing the trip.
   function StartProgressTimer() {
      ellipsis = "";
      progressIntervalId = setInterval("OnProgressTimer()", 500);
   }

   // Animates the progress timer. 
   function OnProgressTimer() {
      if (ellipsis == "...")
         ellipsis = "";
      else
         ellipsis = ellipsis + '.';

      ProgressLabel.innerHTML = ellipsis;
   }

   // Stops the progress animation that appears above the input UI.
   function StopProgressTimer() {
      clearInterval(progressIntervalId);
   }

   // Disables or enables the given element and all its child elements.
   function DisableElement(element, disabled) {
      try {
         element.disabled = disabled;
      }
      catch(e) {
      }
      if (element.childNodes && element.childNodes.length > 0) {
         for (var n = 0; n < element.childNodes.length; n++) {
            DisableElement(element.childNodes[n], disabled);
         }
      }
   }

   // Shows or hides the given element.
   function ShowElement(name, show) {
      if (show) {
         document.getElementById(name).style.visibility = 'visible';
      }
      else {
         document.getElementById(name).style.visibility = 'hidden';
      }
   }
      
   var disambiguateId = 0; // Helps uniquely identify div elements for disambiguating locations.

   // Removes a div element that displays disambiguation information for a single location.
   function ResolveDisambiguation(locationDivId, text, disambiguateDiv) {
      var locationDiv = document.getElementById(locationDivId);
      if (text.length > 0) {
         locationDiv
            .getElementsByTagName("div")[0]
            .getElementsByTagName("input")[0].value = text;
      }
      locationDiv.removeChild(document.getElementById(disambiguateDiv));
   }

   // Creates a div element that displays disambiguation information for a single location.
   function ShowDisambiguation(inputLocation, options) {
            
      // Search for the div that corresponds to the input location.
      for (var waypoint in waypoints) {
               
         var location = waypoints[waypoint]
            .getElementsByTagName("div")[0]
            .getElementsByTagName("input")[0].value;

         if (location == inputLocation) {

            // If there is an existing disambiguation box, remove it.
            var children = waypoints[waypoint].getElementsByTagName("div");
            for (var n = 0; n < children.length; n++) {
               var child = children[n];
               if (child.getAttribute("class") == "DisambiguateBox") {
                  waypoints[waypoint].removeChild(child);
                  break;
               }
            }

            // Create the div.
            var disambiguateDiv = document.createElement("div");                                    
            var divId = "disambiguate" + disambiguateId;            
            disambiguateDiv.setAttribute("id", divId);
            disambiguateId++;
            disambiguateDiv.setAttribute("class", "DisambiguateBox");
            
            // Create header text.
            var a = document.createElement("div");
            a.setAttribute("class", "DisambiguateHeader");
            disambiguateDiv.appendChild(a);
            if (options.length == 0) {
               a.innerHTML = "There were no results for this location.";                        
            }
            else {
               a.innerHTML = "Do you mean:";                        

               // Fill in the options.
               for (var index in options) {
                  var optionDiv = document.createElement("div");
                  optionDiv.setAttribute("class", "DisambiguateItem");
                  // Create a link that selects the option and closes the div.
                  var resolve = document.createElement("a");
                  resolve.setAttribute("href", "javascript:ResolveDisambiguation('" 
                     + waypoints[waypoint].id 
                     + "','" + options[index] + "','" 
                     + divId + "')");
                  resolve.innerHTML = options[index];
                  optionDiv.appendChild(resolve);
                  disambiguateDiv.appendChild(optionDiv);
               }
            }

            // Create a button that closes the options box without selecting an option. 
            var closeDiv = document.createElement("div");
            closeDiv.setAttribute("id", "close" + nextWaypointId);
            closeDiv.setAttribute("class", "ElementContainer SmRightLink");
            {
               var close = document.createElement("a");
               close.setAttribute("href", "javascript:ResolveDisambiguation('" 
                  + waypoints[waypoint].id + "','','" + divId + "')");
               close.innerHTML = "close";
               closeDiv.appendChild(close);
            }
            disambiguateDiv.appendChild(closeDiv);
                 

            waypoints[waypoint].appendChild(disambiguateDiv);
         }
      }            
   }     
   
   // Gets the route map for the provided locations from the Bing Maps control.
   function GetRouteMap(locations) {
                      
      // It's too late to cancel.
      CancelButton.disabled = true;

      // Show a wait cursor.
      document.body.style.cursor = 'wait';

      // Reset map.
      map.DeleteAllShapes();

      // Set options.
      var options = new VERouteOptions;

      // Call this function when map route is determined.
      options.RouteCallback = RouteCallback;

      // Select distance unit.            
      if (TravelUnit.value == "Miles")
         options.DistanceUnit = VERouteDistanceUnit.Mile;
      else
         options.DistanceUnit = VERouteDistanceUnit.Kilometer;

      if (TravelModeSelect.value == "Driving")
         options.RouteMode = VERouteMode.Driving;
      else
         options.RouteMode = VERouteMode.Walking;

      // Select optimization.      
      if (OptimizeSelect.value == "distance") {
         // Minimize distance; don't use traffic information.
         options.RouteOptimize = VERouteOptimize.MinimizeDistance;
         options.UseTraffic = false;
      }
      else if (OptimizeSelect.value == "time") {
         // Minimize time; don't use traffic information.
         options.RouteOptimize = VERouteOptimize.MinimizeTime;
         options.UseTraffic = false;
      }
      else { // timeWithTraffic
         // Minimize time; use traffic information.
         options.RouteOptimize = VERouteOptimize.MinimizeTime;
         options.UseTraffic = true;
      }

      // Don't show the disambiguation dialog because we provide
      // a custom disambiguation mechanism.
      options.ShowDisambiguation = false;

      // Get the map for the route. 
      try {
         map.GetDirections(locations, options);
      }
      catch(e) {
         alert("Error while retrieving directions:\n" + e.Message);
         EnableInput();
      }
   }

   // Pans to the given latitude and longitude and then zooms to the provided
   // zoom level.
   function PanToLatLongAndZoom(lat, lon, zoom) { 
      map.PanToLatLong(new VELatLong(lat, lon));
      if (map.GetZoomLevel() != zoom) {
         map.SetZoomLevel(zoom);
      }     
   }
   
   var optimizedRouteArray;         // The resulting optimized route as an array.
                                    // Each member is a string in the following format:
                                    // "latitude,longitude"
                                    // For example, "47.620056,-122.349261".
   var optimizedRouteNamesArray;    // The display name for each member of optimizedRouteArray.
                                    // For example, "47.620056,-122.349261" might correspond to "Space Needle, WA".

   var defaultZoom = 12;

   // Helper function for the ShowTurns function. Creates a hyperlink to a call to
   // the PanToLatLongAndZoom function.
   function LinkToPanAndZoom(latlonString, linkText, zoom) {
      var latlong = latlonString.split(",");
      return "<a href='javascript:PanToLatLongAndZoom(" 
         + latlong[0] + "," + latlong[1]
         + "," + zoom + ")'>" + linkText + "</a>";
   }

   // Populates the turn-by-turn directions area with information about each 
   // leg.
   function ShowTurns(route) {

      // Establish unit of measure.
      var unitLong =  (TravelUnit.value == "Miles") ? "miles" : "kilometers";
      var unitShort = (TravelUnit.value == "Miles") ? "mi" : "km";

      var turns = 
         "<div class='RouteSummary'>" +
            "<span class='RouteSummaryInterior'><span style='color:#10ae20'>Route:&nbsp;</span><span>" + 
            route.Distance.toFixed(1) + " " + unitLong + ", " + 
            FormatTime(route.Time) + "</span></span>" + 
         "</div>";

      var legs = route.RouteLegs;
      var leg = null;
      var turnNum = -1;  // The turn number.

      turns += "<div id='RouteLegs'>";

      // Get intermediate legs.
      for (var i = 0; i < legs.length; i++) {

         leg = legs[i];  // a VERouteLeg object.
         var legNum = i + 1;
                  
         turns += "<div class='RouteLegSummary'>" + 
                     "<span class='DirectionStepLetter'>" + alphabet[i] + "</span>" +
                     "<div style='margin-left:40px;'>" + 
                        LinkToPanAndZoom(optimizedRouteArray[i], 
                           optimizedRouteNamesArray[i], 
                           defaultZoom) + " to " +
                        LinkToPanAndZoom(optimizedRouteArray[i+1], 
                           optimizedRouteNamesArray[i+1], 
                           defaultZoom) + 
                        "<p>" + leg.Distance.toFixed(1) + " " + 
                           unitLong + ", " + FormatTime(leg.Time) + 
                        "</p>" +
                     "</div>" +
                  "</div><hr />";

         turns += "<div>";
                              
         // Unroll each intermediate leg.
         var turn = null;         // itinerary leg
         var legDistance = null;  // distance for this leg

         for (var j = 0; j < leg.Itinerary.Items.length; j++) {
            turnNum++;

            turn = leg.Itinerary.Items[j];  // a VERouteItineraryItem object

            turns += "<div class='RouteLeg'>";                  

            // Display 'S' (for 'Start') for the first turn (instead of '0').
            var turnText = (turnNum == 0) ? "S" : turnNum;

            turns += "<div class='RouteLegLeft'>" + 
                        "<a href='javascript:PanToLatLongAndZoom(" + 
                        turn.LatLong.Latitude + "," + turn.LatLong.Longitude + "," + defaultZoom + ")'>" 
                        + turnText + "</a>" + 
                     "</div>";

            turns += "<div class='RouteLegCenter'>" + turn.Text;
            // Show hints if available.
            if (turn.Hints != null) {
               for (var k = 0; k < turn.Hints.length; k++) {
                  var hint = turn.Hints[k];
                  if (hint.Type == VERouteHintType.Landmark) {
                     turns += "<p style='color:#888888'><i>" + hint.Text + "</i></p>";
                  }
               }
            }
            turns += "</div>";
                             
            legDistance = turn.Distance;

            // Don't show 0.0 for the arrival.
            if (legDistance < 0.1) {               
               turns += "<div class='RouteLegRight'>" + "< 0.1 " + unitShort + "</div>";
            }
            else {
               turns += "<div class='RouteLegRight'>" + legDistance.toFixed(1) + " " + unitShort + "</div>";
            }
            turns += "</div><hr />";
         }
         turns += "</div>";
      }

      turns += "</div>";

      // Set HTML.
      document.getElementById("Directions").innerHTML = turns;
   }

   // Converts the provided time (in seconds) to a string.
   function FormatTime(time) {
      if (time == null) {
         return "";
      }

      if (time > 60) { 
         var seconds = time % 60;
         var minutes = time - seconds;
         minutes = minutes / 60;
         
         if (minutes > 60) {
            var minLeft = minutes % 60;
            var hours = minutes - minLeft;
            hours = hours / 60;

            return (hours + " hr " + minLeft + " min");
         }
         else {
            return (minutes + " min");
         }
      }
      else {
         return "< 1 min";
      }
   }

   // Callback function for our call to VEMap.GetDirections.
   function RouteCallback(route) {            
      
      // Populate the turn-by-turn directions area.
      ShowTurns(route);

      // Add a pushpin to each location.
      for (var leg in optimizedRouteArray) {
         var latlong = optimizedRouteArray[leg].split(",");
         map.AddShape(new VEShape(VEShapeType.Pushpin, new VELatLong(latlong[0], latlong[1])));
      }

      // Enable the user to create another trip.
      EnableInput();

      ShowElement('TaskHost_WelcomeTask', false);
      ShowElement('TaskHost_Turns', true);

      // Restore cursor.
      document.body.style.cursor = 'default';
   }

   // Event handler for progress notifications from the control.
   function document.OptimizerControl::ProgressCallback(message) {
      // Set message.
      ProgressMessageText.innerHTML = message;
   }

   // Event handler for ambiguous locations from the control.
   function document.OptimizerControl::LocationsCallback(inputLocations, options) {
      // Enable the user to edit trip details.
      EnableInput();
                        
      var jsInputLocations = new VBArray(inputLocations).toArray();
      var jsOptions = new VBArray(options).toArray();

      // The options array uses empty strings to delimit sets of options.
      // For example, if inputLocations contains:
      // {'A', 'B'}
      // and options contains:
      // {'M', 'N', 'O', '', 'P', 'Q', 'R', ''}
      // Then 'M', 'N', 'O' correspond to 'A' 
      // and  'P', 'Q', 'R' correspond to 'B'.

      // Display disambiguation information for each location.
      var i = 0;
      var j = 0;
      for (var k in jsInputLocations) {
         var location = jsInputLocations[k];
         while (jsOptions[j].length != 0) {
            j++;
         }
         ShowDisambiguation(location, jsOptions.slice(i, j));
         i = j + 1;
         j++;
      }
   }

   // Event handler for the optimized route as determined by the control.
   function document.OptimizerControl::RouteCallback(locations, displayNames) {

      // Set global references.
      optimizedRouteArray = new VBArray(locations).toArray(); 
      optimizedRouteNamesArray = new VBArray(displayNames).toArray();

      // Convert each string in the locations array (each element has the format
      // "47.620056,-122.349261") to a VELatLong object.                
      var locations = new Array();
      for (var leg in optimizedRouteArray) {
         var latlong = optimizedRouteArray[leg].split(",");
         locations.push(new VELatLong(latlong[0], latlong[1]));
      }

      // Get the route from the map control.
      GetRouteMap(locations);
   }

   // Event handler for when the control has finished a cancellation operation.
   function document.OptimizerControl::CanceledCallback() {
            
      // Enable the user to create another trip.
      EnableInput();

      ShowElement('TaskHost_Turns', false);      
      ShowElement('TaskHost_WelcomeTask', true);            
   }

   // Event handler for when the control has encountered an unrecoverable error.
   function document.OptimizerControl::ErrorCallback(message) {
      // Set message.
      ErrorMessageText.innerHTML = message;

      // Cancel the operation.
      OnCancel();
   }
</script>

</head> 

<body onload="OnLoad();">

<div id="OuterFrame"> 
   <div id="LeftFrame"> 
      <div class="VETask" id="TaskHost_Turns" style="height:0px;visibility:hidden;">
         <div>
            <span class="LeftFrame_Top"><a href="javascript:OnEditRoute()">Edit route</a></span>
            <span class="LeftFrame_TopRight"><a href="javascript:OnPrint()">Print</a></span>
         </div>
         <div id='Directions'></div>
      </div>

      <div class="VETask" id="TaskHost_WelcomeTask">

      <p class="LeftFrame_Top" style="font-size:150%">Bing Maps Trip Optimizer</p> 

      <div id="ProgressDiv" class="Module" style="visibility:hidden" >
         <p style="font-size:100%">Optimizing your trip<span id="ProgressLabel"></span>
         <a class="aButton" id="CancelButton" href="javascript:OnCancel()" style="background-color:#884022;color:White" 
            title="Cancel this task and start over">Cancel</a>
         </p>
      </div>
      
      <div id="InputArea" class="Module">
         <p style="font-size:100%;margin-left:10px;margin-right:10px">Enter up to 25 locations for your trip. The first location 
            that you specify will be the start and end points.</p> 
      
         <div id="Waypoints">         
         </div>

         <div id="AddToRoute"><a href="javascript:AddWaypoint('')">Add to route</a></div>          
                     
            <div class="ElementContainer">
               <select id="TravelModeSelect" name="Travel-mode">
                  <option value="Driving">Driving&nbsp&nbsp</option>
                  <option value="Walking">Walking&nbsp&nbsp</option>
               </select>
                                                      
               <a class="aButton" href="javascript:GetDirections()" style="background-color:#ef9631;color:White">Get Directions</a>
               <a class="aButton" href="javascript:ResetWaypoints()">Clear</a>
               <div class="ElementContainer">

               <select id="TravelUnit" name="Travel-unit">
                  <option value="Miles">Miles&nbsp&nbsp</option>
                  <option value="Kilometers">Km&nbsp&nbsp</option>
               </select>

               <a class="aButton" href="javascript:AddDeliveryWaypoints()" style="background-color:#7092be; color:White" 
                  title="Populates the route with a local delivery route">Delivery Demo</a>

               <a class="aButton" href="javascript:AddParkWaypoints()" style="background-color:#224022; color:White" 
                  title="Populates the route with interesting parks and destinations in the Pacific Northwest">Parks Demo</a>            
               </div>
            </div>  

            <div class="ElementContainer">               
               <select id="OptimizeSelect" name="Optimize-mode">
                  <option value="distance">Minimize distance&nbsp&nbsp</option>
                  <option value="time">Minimize time&nbsp&nbsp</option>
                  <option value="timeWithTraffic">Avoid traffic&nbsp&nbsp</option>                  
               </select>               
            </div>

            <div class="ElementContainer">         
               <hr />
               <div style="margin-top:5px;margin-left:5px;margin-bottom:-10px">Advanced Options:</div>
               <div style="float:left;width:100%;margin-left:20px;margin-top:10px">
                  <input type="checkbox" name="ParallelProcessing" id="ParallelProcessingCheckbox" style="border:none;background:#ffffff" checked="checked"/>
                  <label for="ParallelProcessingCheckbox">Use parallel processing</label>
               </div>                        

               <div style="float:left;width:100%;margin-top:10px" >
                  <div style="margin-top:20px">
                  <select id="AlphaSelect" name="AlphaSelect">
                     <option value="1.0">1.0</option>
                     <option value="0.9">0.9</option>
                     <option value="0.8">0.8</option>
                     <option value="0.7">0.7</option>
                     <option value="0.6">0.6</option>
                     <option value="0.5">0.5</option>
                     <option value="0.4">0.4</option>
                     <option value="0.3">0.3</option>
                     <option value="0.2">0.2</option>
                     <option value="0.1">0.1</option>
                     <option value="0.0">0.0</option>
                  </select>               
                  <label for="AlphaSelect" title="Pheromone influence">Alpha</label>
                  </div>

                  <div style="margin-top:5px">
                  <select id="BetaSelect" name="BetaSelect">
                     <option value="1.0">1.0</option>
                     <option value="0.9">0.9</option>
                     <option value="0.8">0.8</option>
                     <option value="0.7">0.7</option>
                     <option value="0.6">0.6</option>
                     <option value="0.5">0.5</option>
                     <option value="0.4">0.4</option>
                     <option value="0.3">0.3</option>
                     <option value="0.2">0.2</option>
                     <option value="0.1">0.1</option>
                     <option value="0.0">0.0</option>
                  </select>               
                  <label for="BetaSelect" title="Distance influence">Beta</label>
                  </div>

                  <div style="margin-top:5px">
                  <select id="RhoSelect" name="RhoSelect">
                     <option value="0.9">0.9</option>
                     <option value="0.8">0.8</option>
                     <option value="0.7">0.7</option>
                     <option value="0.6" selected="selected">0.6</option>
                     <option value="0.5">0.5</option>
                     <option value="0.4">0.4</option>
                     <option value="0.3">0.3</option>
                     <option value="0.2">0.2</option>
                     <option value="0.1">0.1</option>
                     <option value="0.0">0.0</option>
                  </select>               
                  <label for="RhoSelect" title="The rate of pheromone evaporation">Rho</label>
                  </div>

                  <div class="InputArea" style="font-size:100%;margin:5px 0 0 20px;max-width:100px;">
                     <input type="text" name="Iterations" id="IterationsText"  maxlength="6" style="max-width:100px" value="1000"/>
                     <label for="IterationsText" style="font-size:90%;margin-left:5px" title="The number of iterations to perform in the simulation">Iterations</label>
                  </div>
               </div>
            </div>
            
            
         </div>
      </div> 
   </div> 

   <div id="FrameSep"> 
   </div>

   <div id="RightFrame"> 
      <div id='Map' style="position:relative; width:100%; height:100%">
      </div>

      <div id='BingDevKey'>
         <p style="margin-left:30px">Please enter your Bing Maps developer key:</p>
         <div class="InputArea" style="width:500px!important">
		      <input id="BingMapsKeyInput" type="password" style="width:500px!important" value="" />
	      </div><a class="aButton" style="margin-right:20px;margin-top:10px" href="javascript:OnBingMapsKey()">OK</a>
      </div>
            
      <div id='ProgressStatus'>
         <p id="ProgressMessageText"></p>
         <p id="ErrorMessageText" style="color:Red"></p>
      </div>
   </div> 
</div> 
</body> 
</html> 

